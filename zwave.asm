; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9466 

	TITLE	src/zwave.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT @IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSoundManager@th08@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSoundManager@th08@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CSoundManager@th08@@QAEJPAUHWND__@@KKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPrimaryBufferFormat@CSoundManager@th08@@QAEJKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateStreaming@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PADKU_GUID@@KKPAXPAUThBgmFormat@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWaveFile@th08@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateStreamingFromMemory@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PAEKPAUThBgmFormat@2@KU_GUID@@KKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSound@th08@@QAE@PAPAUIDirectSoundBuffer@@KKPAVCWaveFile@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSound@th08@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitSoundBuffers@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSound@th08@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFreeBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CSound@th08@@QAEJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVolume@CSound@th08@@QAEJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Stop@CSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Pause@CSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unpause@CSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@CSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStreamingSound@th08@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStreamingSound@th08@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateFadeOut@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateFadeIn@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateShortFadeIn@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateShortFadeOut@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HandleWaveStreamNotification@CStreamingSound@th08@@QAEJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveFile@th08@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveFile@th08@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CWaveFile@th08@@QAEJPADPAUThBgmFormat@2@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reopen@CWaveFile@th08@@QAEJPAUThBgmFormat@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OpenFromMemory@CWaveFile@th08@@QAEJPAEKPAUThBgmFormat@2@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CWaveFile@th08@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetFile@CWaveFile@th08@@QAEJ_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Read@CWaveFile@th08@@QAEJPAEKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CWaveFile@th08@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSound@th08@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStreamingSound@th08@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG56786 DB	'StreamingSound Create ', 0dH, 0aH, 00H
	ORG $+3
$SG56830 DB	'Success ', 0dH, 0aH, 00H
	ORG $+1
$SG57116 DB	'Stream Skip', 0aH, 00H
	ORG $+3
$SG57120 DB	'error : RestoreBuffer in HandleWaveStreamNotification', 0dH
	DB	0aH, 00H
$SG57124 DB	'error : FillBufferWithSound in HandleWaveStreamNotificat'
	DB	'ion', 0dH, 0aH, 00H
	ORG $+2
$SG57128 DB	'error : Buffer->Lock in HandleWaveStreamNotification', 0dH
	DB	0aH, 00H
	ORG $+1
$SG57135 DB	'error : m_pWaveFile->Read in HandleWaveStreamNotificatio'
	DB	'n', 0dH, 0aH, 00H
	ORG $+4
$SG57149 DB	'error : m_pWaveFile->ResetFile in HandleWaveStreamNotifi'
	DB	'cation', 0dH, 0aH, 00H
	ORG $+3
$SG57153 DB	'error : m_pWaveFile->Read(+) in HandleWaveStreamNotifica'
	DB	'tion', 0dH, 0aH, 00H
	ORG $+5
$SG57156 DB	'error : m_apDSBuffer[0]->GetCurrentPosition in HandleWav'
	DB	'eStreamNotification', 0dH, 0aH, 00H
	ORG $+2
$SG57190 DB	'Streaming File Open %s', 0dH, 0aH, 00H
_DATA	ENDS
PUBLIC	??0CSoundManager@th08@@QAE@XZ			; th08::CSoundManager::CSoundManager
; Function compile flags: /Odt
;	COMDAT ??0CSoundManager@th08@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSoundManager@th08@@QAE@XZ PROC NEAR			; th08::CSoundManager::CSoundManager, COMDAT
; _this$ = ecx
; File z:\home\juniper\documents\github\th08\src\zwave.cpp
; Line 27
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 29
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSoundManager@th08@@QAE@XZ ENDP			; th08::CSoundManager::CSoundManager
_TEXT	ENDS
PUBLIC	??1CSoundManager@th08@@QAE@XZ			; th08::CSoundManager::~CSoundManager
; Function compile flags: /Odt
;	COMDAT ??1CSoundManager@th08@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSoundManager@th08@@QAE@XZ PROC NEAR			; th08::CSoundManager::~CSoundManager, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L56667
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L56667:
; Line 38
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSoundManager@th08@@QAE@XZ ENDP			; th08::CSoundManager::~CSoundManager
_TEXT	ENDS
PUBLIC	?Initialize@CSoundManager@th08@@QAEJPAUHWND__@@KKKK@Z ; th08::CSoundManager::Initialize
PUBLIC	?SetPrimaryBufferFormat@CSoundManager@th08@@QAEJKKK@Z ; th08::CSoundManager::SetPrimaryBufferFormat
EXTRN	_DirectSoundCreate8@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Initialize@CSoundManager@th08@@QAEJPAUHWND__@@KKKK@Z
_TEXT	SEGMENT
_this$ = -12
_hr$ = -8
_pDSBPrimary$ = -4
_hWnd$ = 8
_dwCoopLevel$ = 12
_dwPrimaryChannels$ = 16
_dwPrimaryFreq$ = 20
_dwPrimaryBitRate$ = 24
?Initialize@CSoundManager@th08@@QAEJPAUHWND__@@KKKK@Z PROC NEAR ; th08::CSoundManager::Initialize, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	mov	DWORD PTR _pDSBPrimary$[ebp], 0
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L56679
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L56679:
; Line 54
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	0
	call	_DirectSoundCreate8@12
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56681
; Line 55
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L56676
$L56681:
; Line 58
	mov	edx, DWORD PTR _dwCoopLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+24]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56683
; Line 59
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L56676
$L56683:
; Line 62
	mov	eax, DWORD PTR _dwPrimaryBitRate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwPrimaryFreq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwPrimaryChannels$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPrimaryBufferFormat@CSoundManager@th08@@QAEJKKK@Z ; th08::CSoundManager::SetPrimaryBufferFormat
; Line 64
	xor	eax, eax
$L56676:
; Line 65
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Initialize@CSoundManager@th08@@QAEJPAUHWND__@@KKKK@Z ENDP ; th08::CSoundManager::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetPrimaryBufferFormat@CSoundManager@th08@@QAEJKKK@Z
_TEXT	SEGMENT
_this$ = -68
_hr$ = -64
_dsbd$ = -60
_wfx$ = -24
_pDSBPrimary$ = -4
_dwPrimaryChannels$ = 8
_dwPrimaryFreq$ = 12
_dwPrimaryBitRate$ = 16
?SetPrimaryBufferFormat@CSoundManager@th08@@QAEJKKK@Z PROC NEAR ; th08::CSoundManager::SetPrimaryBufferFormat, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	mov	DWORD PTR _pDSBPrimary$[ebp], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L56693
; Line 81
	mov	eax, -2147221008			; 800401f0H
	jmp	$L56690
$L56693:
; Line 85
	mov	ecx, 9
	xor	eax, eax
	lea	edi, DWORD PTR _dsbd$[ebp]
	rep stosd
; Line 86
	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H
; Line 87
	mov	DWORD PTR _dsbd$[ebp+4], 1
; Line 88
	mov	DWORD PTR _dsbd$[ebp+8], 0
; Line 89
	mov	DWORD PTR _dsbd$[ebp+16], 0
; Line 91
	push	0
	lea	ecx, DWORD PTR _pDSBPrimary$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dsbd$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [ecx+12]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56699
; Line 92
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L56690
$L56699:
; Line 95
	xor	edx, edx
	mov	DWORD PTR _wfx$[ebp], edx
	mov	DWORD PTR _wfx$[ebp+4], edx
	mov	DWORD PTR _wfx$[ebp+8], edx
	mov	DWORD PTR _wfx$[ebp+12], edx
	mov	WORD PTR _wfx$[ebp+16], dx
; Line 96
	mov	WORD PTR _wfx$[ebp], 1
; Line 97
	mov	ax, WORD PTR _dwPrimaryChannels$[ebp]
	mov	WORD PTR _wfx$[ebp+2], ax
; Line 98
	mov	ecx, DWORD PTR _dwPrimaryFreq$[ebp]
	mov	DWORD PTR _wfx$[ebp+4], ecx
; Line 99
	mov	dx, WORD PTR _dwPrimaryBitRate$[ebp]
	mov	WORD PTR _wfx$[ebp+14], dx
; Line 100
	movzx	eax, WORD PTR _wfx$[ebp+14]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movzx	ecx, WORD PTR _wfx$[ebp+2]
	imul	eax, ecx
	mov	WORD PTR _wfx$[ebp+12], ax
; Line 101
	movzx	edx, WORD PTR _wfx$[ebp+12]
	mov	eax, DWORD PTR _wfx$[ebp+4]
	imul	eax, edx
	mov	DWORD PTR _wfx$[ebp+8], eax
; Line 103
	lea	ecx, DWORD PTR _wfx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSBPrimary$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSBPrimary$[ebp]
	push	ecx
	call	DWORD PTR [eax+56]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56705
; Line 104
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L56690
$L56705:
; Line 106
	cmp	DWORD PTR _pDSBPrimary$[ebp], 0
	je	SHORT $L56706
	mov	edx, DWORD PTR _pDSBPrimary$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSBPrimary$[ebp]
	push	ecx
	call	DWORD PTR [eax+8]
	mov	DWORD PTR _pDSBPrimary$[ebp], 0
$L56706:
; Line 108
	xor	eax, eax
$L56690:
; Line 109
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetPrimaryBufferFormat@CSoundManager@th08@@QAEJKKK@Z ENDP ; th08::CSoundManager::SetPrimaryBufferFormat
_TEXT	ENDS
PUBLIC	?CreateStreaming@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PADKU_GUID@@KKPAXPAUThBgmFormat@2@@Z ; th08::CSoundManager::CreateStreaming
PUBLIC	??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z ; th08::CStreamingSound::CStreamingSound
PUBLIC	??0CWaveFile@th08@@QAE@XZ			; th08::CWaveFile::CWaveFile
PUBLIC	?Open@CWaveFile@th08@@QAEJPADPAUThBgmFormat@2@K@Z ; th08::CWaveFile::Open
PUBLIC	??_GCWaveFile@th08@@QAEPAXI@Z			; th08::CWaveFile::`scalar deleting destructor'
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	_IID_IDirectSoundNotify:BYTE
;	COMDAT xdata$x
xdata$x	SEGMENT
$T57353	DD	0ffffffffH
	DD	FLAT:$L57345
	DD	0ffffffffH
	DD	FLAT:$L57346
$T57350	DD	019930520H
	DD	02H
	DD	FLAT:$T57353
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ?CreateStreaming@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PADKU_GUID@@KKPAXPAUThBgmFormat@2@@Z
_TEXT	SEGMENT
tv187 = -128
tv82 = -124
tv72 = -120
_this$ = -116
$T57342 = -112
$T57341 = -108
$T57340 = -104
$T57339 = -100
$T57338 = -96
$T57335 = -92
$T57334 = -88
$T57331 = -84
$T57330 = -80
_i$56750 = -76
_pDSNotify$ = -72
_hr$ = -68
_dsbd$ = -64
_pDSBuffer$ = -28
_pWaveFile$ = -24
_aPosNotify$ = -20
_dwDSBufferSize$ = -16
__$EHRec$ = -12
_ppStreamingSound$ = 8
_strWaveFileName$ = 12
_dwCreationFlags$ = 16
_guid3DAlgorithm$ = 20
_dwNotifyCount$ = 36
_dwNotifySize$ = 40
_hNotifyEvent$ = 44
_pzwf$ = 48
?CreateStreaming@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PADKU_GUID@@KKPAXPAUThBgmFormat@2@@Z PROC NEAR ; th08::CSoundManager::CreateStreaming, COMDAT
; _this$ = ecx
; Line 334
	push	ebp
	mov	ebp, esp
	push	-1
	push	$L57351
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 116				; 00000074H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 337
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L56720
; Line 338
	mov	eax, -2147221008			; 800401f0H
	jmp	$L56718
$L56720:
; Line 340
	mov	DWORD PTR _pDSBuffer$[ebp], 0
; Line 341
	mov	DWORD PTR _pWaveFile$[ebp], 0
; Line 342
	mov	DWORD PTR _aPosNotify$[ebp], 0
; Line 343
	mov	DWORD PTR _pDSNotify$[ebp], 0
; Line 345
	push	148					; 00000094H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57331[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T57331[ebp], 0
	je	SHORT $L57332
	mov	ecx, DWORD PTR $T57331[ebp]
	call	??0CWaveFile@th08@@QAE@XZ		; th08::CWaveFile::CWaveFile
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $L57333
$L57332:
	mov	DWORD PTR tv72[ebp], 0
$L57333:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T57330[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T57330[ebp]
	mov	DWORD PTR _pWaveFile$[ebp], edx
; Line 347
	push	1
	mov	eax, DWORD PTR _pzwf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strWaveFileName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pWaveFile$[ebp]
	call	?Open@CWaveFile@th08@@QAEJPADPAUThBgmFormat@2@K@Z ; th08::CWaveFile::Open
	test	eax, eax
	je	SHORT $L56731
; Line 349
	mov	edx, DWORD PTR _pWaveFile$[ebp]
	mov	DWORD PTR $T57335[ebp], edx
	mov	eax, DWORD PTR $T57335[ebp]
	mov	DWORD PTR $T57334[ebp], eax
	cmp	DWORD PTR $T57334[ebp], 0
	je	SHORT $L57336
	push	1
	mov	ecx, DWORD PTR $T57334[ebp]
	call	??_GCWaveFile@th08@@QAEPAXI@Z
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $L57337
$L57336:
	mov	DWORD PTR tv82[ebp], 0
$L57337:
; Line 350
	mov	eax, -2147467259			; 80004005H
	jmp	$L56718
$L56731:
; Line 354
	mov	ecx, DWORD PTR _dwNotifySize$[ebp]
	imul	ecx, DWORD PTR _dwNotifyCount$[ebp]
	mov	DWORD PTR _dwDSBufferSize$[ebp], ecx
; Line 360
	mov	ecx, 9
	xor	eax, eax
	lea	edi, DWORD PTR _dsbd$[ebp]
	rep stosd
; Line 361
	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H
; Line 363
	mov	edx, DWORD PTR _dwCreationFlags$[ebp]
	or	edx, 256				; 00000100H
	or	edx, 32768				; 00008000H
	or	edx, 65536				; 00010000H
	or	edx, 128				; 00000080H
	or	edx, 8
	mov	DWORD PTR _dsbd$[ebp+4], edx
; Line 364
	mov	eax, DWORD PTR _dwDSBufferSize$[ebp]
	mov	DWORD PTR _dsbd$[ebp+8], eax
; Line 365
	mov	ecx, DWORD PTR _guid3DAlgorithm$[ebp]
	mov	DWORD PTR _dsbd$[ebp+20], ecx
	mov	edx, DWORD PTR _guid3DAlgorithm$[ebp+4]
	mov	DWORD PTR _dsbd$[ebp+24], edx
	mov	eax, DWORD PTR _guid3DAlgorithm$[ebp+8]
	mov	DWORD PTR _dsbd$[ebp+28], eax
	mov	ecx, DWORD PTR _guid3DAlgorithm$[ebp+12]
	mov	DWORD PTR _dsbd$[ebp+32], ecx
; Line 366
	mov	edx, DWORD PTR _pWaveFile$[ebp]
	mov	eax, DWORD PTR [edx+144]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _dsbd$[ebp+16], eax
; Line 368
	push	0
	lea	ecx, DWORD PTR _pDSBuffer$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dsbd$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [ecx+12]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56740
; Line 369
	mov	eax, -2147467259			; 80004005H
	jmp	$L56718
$L56740:
; Line 373
	lea	edx, DWORD PTR _pDSNotify$[ebp]
	push	edx
	push	OFFSET FLAT:_IID_IDirectSoundNotify
	mov	eax, DWORD PTR _pDSBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSBuffer$[ebp]
	push	edx
	call	DWORD PTR [ecx]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56744
; Line 374
	mov	eax, -2147467259			; 80004005H
	jmp	$L56718
$L56744:
; Line 376
	mov	eax, DWORD PTR _dwNotifyCount$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57338[ebp], eax
	mov	ecx, DWORD PTR $T57338[ebp]
	mov	DWORD PTR _aPosNotify$[ebp], ecx
; Line 377
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	jne	SHORT $L56748
; Line 378
	mov	eax, -2147024882			; 8007000eH
	jmp	$L56718
$L56748:
; Line 380
	mov	DWORD PTR _i$56750[ebp], 0
	jmp	SHORT $L56751
$L56752:
	mov	edx, DWORD PTR _i$56750[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56750[ebp], edx
$L56751:
	mov	eax, DWORD PTR _i$56750[ebp]
	cmp	eax, DWORD PTR _dwNotifyCount$[ebp]
	jae	SHORT $L56753
; Line 382
	mov	ecx, DWORD PTR _dwNotifySize$[ebp]
	imul	ecx, DWORD PTR _i$56750[ebp]
	mov	edx, DWORD PTR _dwNotifySize$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _i$56750[ebp]
	mov	edx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 383
	mov	eax, DWORD PTR _i$56750[ebp]
	mov	ecx, DWORD PTR _aPosNotify$[ebp]
	mov	edx, DWORD PTR _hNotifyEvent$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 384
	jmp	SHORT $L56752
$L56753:
; Line 388
	mov	eax, DWORD PTR _aPosNotify$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwNotifyCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSNotify$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSNotify$[ebp]
	push	ecx
	call	DWORD PTR [eax+12]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56755
; Line 390
	cmp	DWORD PTR _pDSNotify$[ebp], 0
	je	SHORT $L56756
	mov	edx, DWORD PTR _pDSNotify$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSNotify$[ebp]
	push	ecx
	call	DWORD PTR [eax+8]
	mov	DWORD PTR _pDSNotify$[ebp], 0
$L56756:
; Line 391
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	je	SHORT $L56757
	mov	edx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR $T57339[ebp], edx
	mov	eax, DWORD PTR $T57339[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _aPosNotify$[ebp], 0
$L56757:
; Line 392
	mov	eax, -2147467259			; 80004005H
	jmp	$L56718
$L56755:
; Line 395
	cmp	DWORD PTR _pDSNotify$[ebp], 0
	je	SHORT $L56760
	mov	ecx, DWORD PTR _pDSNotify$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDSNotify$[ebp]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR _pDSNotify$[ebp], 0
$L56760:
; Line 396
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	je	SHORT $L56761
	mov	ecx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR $T57340[ebp], ecx
	mov	edx, DWORD PTR $T57340[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _aPosNotify$[ebp], 0
$L56761:
; Line 399
	push	120					; 00000078H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57342[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T57342[ebp], 0
	je	SHORT $L57343
	mov	eax, DWORD PTR _dwNotifySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pWaveFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwDSBufferSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDSBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T57342[ebp]
	call	??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z ; th08::CStreamingSound::CStreamingSound
	mov	DWORD PTR tv187[ebp], eax
	jmp	SHORT $L57344
$L57343:
	mov	DWORD PTR tv187[ebp], 0
$L57344:
	mov	ecx, DWORD PTR tv187[ebp]
	mov	DWORD PTR $T57341[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _ppStreamingSound$[ebp]
	mov	eax, DWORD PTR $T57341[ebp]
	mov	DWORD PTR [edx], eax
; Line 401
	mov	ecx, DWORD PTR _ppStreamingSound$[ebp]
	mov	edi, DWORD PTR [ecx]
	add	edi, 52					; 00000034H
	mov	ecx, 9
	lea	esi, DWORD PTR _dsbd$[ebp]
	rep movsd
; Line 402
	mov	edx, DWORD PTR _ppStreamingSound$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 403
	mov	edx, DWORD PTR _ppStreamingSound$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hNotifyEvent$[ebp]
	mov	DWORD PTR [eax+112], ecx
; Line 404
	mov	edx, DWORD PTR _ppStreamingSound$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+116], 0
; Line 406
	xor	eax, eax
$L56718:
; Line 407
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L57345:
	mov	eax, DWORD PTR $T57331[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
$L57346:
	mov	eax, DWORD PTR $T57342[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
$L57351:
	mov	eax, OFFSET FLAT:$T57350
	jmp	___CxxFrameHandler
text$x	ENDS
?CreateStreaming@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PADKU_GUID@@KKPAXPAUThBgmFormat@2@@Z ENDP ; th08::CSoundManager::CreateStreaming
PUBLIC	??1CWaveFile@th08@@QAE@XZ			; th08::CWaveFile::~CWaveFile
; Function compile flags: /Odt
;	COMDAT ??_GCWaveFile@th08@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCWaveFile@th08@@QAEPAXI@Z PROC NEAR			; th08::CWaveFile::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CWaveFile@th08@@QAE@XZ		; th08::CWaveFile::~CWaveFile
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L56772
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L56772:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCWaveFile@th08@@QAEPAXI@Z ENDP			; th08::CWaveFile::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CreateStreamingFromMemory@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PAEKPAUThBgmFormat@2@KU_GUID@@KKPAX@Z ; th08::CSoundManager::CreateStreamingFromMemory
PUBLIC	?OpenFromMemory@CWaveFile@th08@@QAEJPAEKPAUThBgmFormat@2@K@Z ; th08::CWaveFile::OpenFromMemory
EXTRN	?DebugPrint@utils@th08@@YAXPADZZ:NEAR		; th08::utils::DebugPrint
;	COMDAT xdata$x
xdata$x	SEGMENT
$T57377	DD	0ffffffffH
	DD	FLAT:$L57372
	DD	0ffffffffH
	DD	FLAT:$L57373
$T57375	DD	019930520H
	DD	02H
	DD	FLAT:$T57377
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ?CreateStreamingFromMemory@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PAEKPAUThBgmFormat@2@KU_GUID@@KKPAX@Z
_TEXT	SEGMENT
tv182 = -116
tv73 = -112
_this$ = -108
$T57369 = -104
$T57368 = -100
$T57367 = -96
$T57366 = -92
$T57365 = -88
$T57362 = -84
$T57361 = -80
_i$56812 = -76
_pDSNotify$ = -72
_hr$ = -68
_dsbd$ = -64
_pDSBuffer$ = -28
_pWaveFile$ = -24
_aPosNotify$ = -20
_dwDSBufferSize$ = -16
__$EHRec$ = -12
_ppStreamingSound$ = 8
_pbData$ = 12
_ulDataSize$ = 16
_pzwf$ = 20
_dwCreationFlags$ = 24
_guid3DAlgorithm$ = 28
_dwNotifyCount$ = 44
_dwNotifySize$ = 48
_hNotifyEvent$ = 52
?CreateStreamingFromMemory@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PAEKPAUThBgmFormat@2@KU_GUID@@KKPAX@Z PROC NEAR ; th08::CSoundManager::CreateStreamingFromMemory, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	-1
	push	$L57376
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 419
	push	OFFSET FLAT:$SG56786
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 421
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L56787
; Line 422
	mov	eax, -2147221008			; 800401f0H
	jmp	$L56784
$L56787:
; Line 424
	mov	DWORD PTR _pDSBuffer$[ebp], 0
; Line 425
	mov	DWORD PTR _pWaveFile$[ebp], 0
; Line 426
	mov	DWORD PTR _aPosNotify$[ebp], 0
; Line 427
	mov	DWORD PTR _pDSNotify$[ebp], 0
; Line 429
	push	148					; 00000094H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57362[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T57362[ebp], 0
	je	SHORT $L57363
	mov	ecx, DWORD PTR $T57362[ebp]
	call	??0CWaveFile@th08@@QAE@XZ		; th08::CWaveFile::CWaveFile
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $L57364
$L57363:
	mov	DWORD PTR tv73[ebp], 0
$L57364:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T57361[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T57361[ebp]
	mov	DWORD PTR _pWaveFile$[ebp], edx
; Line 430
	push	0
	mov	eax, DWORD PTR _pzwf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ulDataSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pWaveFile$[ebp]
	call	?OpenFromMemory@CWaveFile@th08@@QAEJPAEKPAUThBgmFormat@2@K@Z ; th08::CWaveFile::OpenFromMemory
; Line 433
	mov	eax, DWORD PTR _dwNotifySize$[ebp]
	imul	eax, DWORD PTR _dwNotifyCount$[ebp]
	mov	DWORD PTR _dwDSBufferSize$[ebp], eax
; Line 439
	mov	ecx, 9
	xor	eax, eax
	lea	edi, DWORD PTR _dsbd$[ebp]
	rep stosd
; Line 440
	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H
; Line 442
	mov	ecx, DWORD PTR _dwCreationFlags$[ebp]
	or	ecx, 256				; 00000100H
	or	ecx, 32768				; 00008000H
	or	ecx, 65536				; 00010000H
	or	ecx, 128				; 00000080H
	or	ecx, 8
	mov	DWORD PTR _dsbd$[ebp+4], ecx
; Line 443
	mov	edx, DWORD PTR _dwDSBufferSize$[ebp]
	mov	DWORD PTR _dsbd$[ebp+8], edx
; Line 444
	mov	eax, DWORD PTR _guid3DAlgorithm$[ebp]
	mov	DWORD PTR _dsbd$[ebp+20], eax
	mov	ecx, DWORD PTR _guid3DAlgorithm$[ebp+4]
	mov	DWORD PTR _dsbd$[ebp+24], ecx
	mov	edx, DWORD PTR _guid3DAlgorithm$[ebp+8]
	mov	DWORD PTR _dsbd$[ebp+28], edx
	mov	eax, DWORD PTR _guid3DAlgorithm$[ebp+12]
	mov	DWORD PTR _dsbd$[ebp+32], eax
; Line 445
	mov	ecx, DWORD PTR _pWaveFile$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _dsbd$[ebp+16], edx
; Line 447
	push	0
	lea	eax, DWORD PTR _pDSBuffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dsbd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	call	DWORD PTR [eax+12]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56802
; Line 448
	mov	eax, -2147467259			; 80004005H
	jmp	$L56784
$L56802:
; Line 452
	lea	ecx, DWORD PTR _pDSNotify$[ebp]
	push	ecx
	push	OFFSET FLAT:_IID_IDirectSoundNotify
	mov	edx, DWORD PTR _pDSBuffer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSBuffer$[ebp]
	push	ecx
	call	DWORD PTR [eax]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56806
; Line 453
	mov	eax, -2147467259			; 80004005H
	jmp	$L56784
$L56806:
; Line 455
	mov	edx, DWORD PTR _dwNotifyCount$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57365[ebp], eax
	mov	eax, DWORD PTR $T57365[ebp]
	mov	DWORD PTR _aPosNotify$[ebp], eax
; Line 456
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	jne	SHORT $L56810
; Line 457
	mov	eax, -2147024882			; 8007000eH
	jmp	$L56784
$L56810:
; Line 459
	mov	DWORD PTR _i$56812[ebp], 0
	jmp	SHORT $L56813
$L56814:
	mov	ecx, DWORD PTR _i$56812[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$56812[ebp], ecx
$L56813:
	mov	edx, DWORD PTR _i$56812[ebp]
	cmp	edx, DWORD PTR _dwNotifyCount$[ebp]
	jae	SHORT $L56815
; Line 461
	mov	eax, DWORD PTR _dwNotifySize$[ebp]
	imul	eax, DWORD PTR _i$56812[ebp]
	mov	ecx, DWORD PTR _dwNotifySize$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	eax, DWORD PTR _i$56812[ebp]
	mov	ecx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 462
	mov	edx, DWORD PTR _i$56812[ebp]
	mov	eax, DWORD PTR _aPosNotify$[ebp]
	mov	ecx, DWORD PTR _hNotifyEvent$[ebp]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 463
	jmp	SHORT $L56814
$L56815:
; Line 467
	mov	edx, DWORD PTR _aPosNotify$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwNotifyCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDSNotify$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDSNotify$[ebp]
	push	eax
	call	DWORD PTR [edx+12]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56817
; Line 469
	cmp	DWORD PTR _pDSNotify$[ebp], 0
	je	SHORT $L56818
	mov	ecx, DWORD PTR _pDSNotify$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDSNotify$[ebp]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR _pDSNotify$[ebp], 0
$L56818:
; Line 470
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	je	SHORT $L56819
	mov	ecx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR $T57366[ebp], ecx
	mov	edx, DWORD PTR $T57366[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _aPosNotify$[ebp], 0
$L56819:
; Line 471
	mov	eax, -2147467259			; 80004005H
	jmp	$L56784
$L56817:
; Line 474
	cmp	DWORD PTR _pDSNotify$[ebp], 0
	je	SHORT $L56822
	mov	eax, DWORD PTR _pDSNotify$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSNotify$[ebp]
	push	edx
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR _pDSNotify$[ebp], 0
$L56822:
; Line 475
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	je	SHORT $L56823
	mov	eax, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR $T57367[ebp], eax
	mov	ecx, DWORD PTR $T57367[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _aPosNotify$[ebp], 0
$L56823:
; Line 478
	push	120					; 00000078H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57369[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T57369[ebp], 0
	je	SHORT $L57370
	mov	edx, DWORD PTR _dwNotifySize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pWaveFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwDSBufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSBuffer$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T57369[ebp]
	call	??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z ; th08::CStreamingSound::CStreamingSound
	mov	DWORD PTR tv182[ebp], eax
	jmp	SHORT $L57371
$L57370:
	mov	DWORD PTR tv182[ebp], 0
$L57371:
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR $T57368[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppStreamingSound$[ebp]
	mov	edx, DWORD PTR $T57368[ebp]
	mov	DWORD PTR [ecx], edx
; Line 480
	mov	eax, DWORD PTR _ppStreamingSound$[ebp]
	mov	edi, DWORD PTR [eax]
	add	edi, 52					; 00000034H
	mov	ecx, 9
	lea	esi, DWORD PTR _dsbd$[ebp]
	rep movsd
; Line 481
	mov	ecx, DWORD PTR _ppStreamingSound$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 482
	mov	ecx, DWORD PTR _ppStreamingSound$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _hNotifyEvent$[ebp]
	mov	DWORD PTR [edx+112], eax
; Line 483
	mov	ecx, DWORD PTR _ppStreamingSound$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+116], 0
; Line 485
	push	OFFSET FLAT:$SG56830
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 487
	xor	eax, eax
$L56784:
; Line 488
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L57372:
	mov	eax, DWORD PTR $T57362[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
$L57373:
	mov	eax, DWORD PTR $T57369[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
$L57376:
	mov	eax, OFFSET FLAT:$T57375
	jmp	___CxxFrameHandler
text$x	ENDS
?CreateStreamingFromMemory@CSoundManager@th08@@QAEJPAPAVCStreamingSound@2@PAEKPAUThBgmFormat@2@KU_GUID@@KKPAX@Z ENDP ; th08::CSoundManager::CreateStreamingFromMemory
PUBLIC	??0CSound@th08@@QAE@PAPAUIDirectSoundBuffer@@KKPAVCWaveFile@1@@Z ; th08::CSound::CSound
PUBLIC	?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z ; th08::CSound::FillBufferWithSound
PUBLIC	??_7CSound@th08@@6B@				; th08::CSound::`vftable'
PUBLIC	??_GCSound@th08@@UAEPAXI@Z			; th08::CSound::`scalar deleting destructor'
EXTRN	??_ECSound@th08@@UAEPAXI@Z:NEAR			; th08::CSound::`vector deleting destructor'
;	COMDAT ??_7CSound@th08@@6B@
CONST	SEGMENT
??_7CSound@th08@@6B@ DD FLAT:??_ECSound@th08@@UAEPAXI@Z	; th08::CSound::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CSound@th08@@QAE@PAPAUIDirectSoundBuffer@@KKPAVCWaveFile@1@@Z
_TEXT	SEGMENT
_this$ = -12
$T57382 = -8
_i$ = -4
_apDSBuffer$ = 8
_dwDSBufferSize$ = 12
_dwNumBuffers$ = 16
_pWaveFile$ = 20
??0CSound@th08@@QAE@PAPAUIDirectSoundBuffer@@KKPAVCWaveFile@1@@Z PROC NEAR ; th08::CSound::CSound, COMDAT
; _this$ = ecx
; Line 495
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CSound@th08@@6B@
; Line 498
	mov	ecx, DWORD PTR _dwNumBuffers$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57382[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T57382[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 499
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L56842
$L56843:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$L56842:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _dwNumBuffers$[ebp]
	jae	SHORT $L56844
; Line 500
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _apDSBuffer$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $L56843
$L56844:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwDSBufferSize$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 503
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwNumBuffers$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 504
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pWaveFile$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 506
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z ; th08::CSound::FillBufferWithSound
; Line 509
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L56845
$L56846:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$L56845:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _dwNumBuffers$[ebp]
	jae	SHORT $L56847
; Line 510
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax]
	push	edx
	call	DWORD PTR [eax+52]
	jmp	SHORT $L56846
$L56847:
; Line 512
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0CSound@th08@@QAE@PAPAUIDirectSoundBuffer@@KKPAVCWaveFile@1@@Z ENDP ; th08::CSound::CSound
_TEXT	ENDS
PUBLIC	??1CSound@th08@@UAE@XZ				; th08::CSound::~CSound
; Function compile flags: /Odt
;	COMDAT ??_GCSound@th08@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSound@th08@@UAEPAXI@Z PROC NEAR			; th08::CSound::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSound@th08@@UAE@XZ			; th08::CSound::~CSound
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L56851
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L56851:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSound@th08@@UAEPAXI@Z ENDP				; th08::CSound::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?InitSoundBuffers@CStreamingSound@th08@@QAEJXZ	; th08::CStreamingSound::InitSoundBuffers
; Function compile flags: /Odt
;	COMDAT ?InitSoundBuffers@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -40
$T57391 = -36
$T57390 = -32
$T57389 = -28
$T57388 = -24
$T57387 = -20
_j$56880 = -16
_pDSNotify$ = -12
_aPosNotify$ = -8
_i$ = -4
?InitSoundBuffers@CStreamingSound@th08@@QAEJXZ PROC NEAR ; th08::CStreamingSound::InitSoundBuffers, COMDAT
; _this$ = ecx
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 525
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L56856
$L56857:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$L56856:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $L56858
; Line 526
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $L56859
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], 0
$L56859:
	jmp	SHORT $L56857
$L56858:
; Line 528
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $L56860
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T57387[ebp], ecx
	mov	edx, DWORD PTR $T57387[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$L56860:
; Line 530
	mov	DWORD PTR _aPosNotify$[ebp], 0
; Line 531
	mov	DWORD PTR _pDSNotify$[ebp], 0
; Line 533
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57388[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T57388[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 535
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L56866
$L56867:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$L56866:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	$L56868
; Line 537
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR [edx+12]
	test	eax, eax
	jge	SHORT $L56870
; Line 538
	mov	eax, -2147467259			; 80004005H
	jmp	$L56854
$L56870:
; Line 540
	lea	eax, DWORD PTR _pDSNotify$[ebp]
	push	eax
	push	OFFSET FLAT:_IID_IDirectSoundNotify
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [ecx]
	test	eax, eax
	jge	SHORT $L56874
; Line 541
	mov	eax, -2147467259			; 80004005H
	jmp	$L56854
$L56874:
; Line 543
	push	128					; 00000080H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57389[ebp], eax
	mov	edx, DWORD PTR $T57389[ebp]
	mov	DWORD PTR _aPosNotify$[ebp], edx
; Line 544
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	jne	SHORT $L56878
; Line 545
	mov	eax, -2147024882			; 8007000eH
	jmp	$L56854
$L56878:
; Line 547
	mov	DWORD PTR _j$56880[ebp], 0
	jmp	SHORT $L56881
$L56882:
	mov	eax, DWORD PTR _j$56880[ebp]
	add	eax, 1
	mov	DWORD PTR _j$56880[ebp], eax
$L56881:
	cmp	DWORD PTR _j$56880[ebp], 16		; 00000010H
	jae	SHORT $L56883
; Line 549
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	imul	edx, DWORD PTR _j$56880[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	eax, DWORD PTR _j$56880[ebp]
	mov	ecx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 550
	mov	edx, DWORD PTR _j$56880[ebp]
	mov	eax, DWORD PTR _aPosNotify$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 551
	jmp	SHORT $L56882
$L56883:
; Line 553
	mov	edx, DWORD PTR _aPosNotify$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _pDSNotify$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSNotify$[ebp]
	push	edx
	call	DWORD PTR [ecx+12]
	test	eax, eax
	jge	SHORT $L56885
; Line 555
	cmp	DWORD PTR _pDSNotify$[ebp], 0
	je	SHORT $L56886
	mov	eax, DWORD PTR _pDSNotify$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSNotify$[ebp]
	push	edx
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR _pDSNotify$[ebp], 0
$L56886:
; Line 556
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	je	SHORT $L56887
	mov	eax, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR $T57390[ebp], eax
	mov	ecx, DWORD PTR $T57390[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _aPosNotify$[ebp], 0
$L56887:
; Line 557
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $L56854
$L56885:
; Line 560
	cmp	DWORD PTR _pDSNotify$[ebp], 0
	je	SHORT $L56890
	mov	edx, DWORD PTR _pDSNotify$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSNotify$[ebp]
	push	ecx
	call	DWORD PTR [eax+8]
	mov	DWORD PTR _pDSNotify$[ebp], 0
$L56890:
; Line 561
	cmp	DWORD PTR _aPosNotify$[ebp], 0
	je	SHORT $L56891
	mov	edx, DWORD PTR _aPosNotify$[ebp]
	mov	DWORD PTR $T57391[ebp], edx
	mov	eax, DWORD PTR $T57391[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _aPosNotify$[ebp], 0
$L56891:
; Line 562
	jmp	$L56867
$L56868:
; Line 564
	xor	eax, eax
$L56854:
; Line 565
	mov	esp, ebp
	pop	ebp
	ret	0
?InitSoundBuffers@CStreamingSound@th08@@QAEJXZ ENDP	; th08::CStreamingSound::InitSoundBuffers
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CSound@th08@@UAE@XZ
_TEXT	SEGMENT
tv129 = -24
_this$ = -20
$T57396 = -16
$T57395 = -12
$T57394 = -8
_i$56897 = -4
??1CSound@th08@@UAE@XZ PROC NEAR			; th08::CSound::~CSound, COMDAT
; _this$ = ecx
; Line 572
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CSound@th08@@6B@
; Line 573
	mov	DWORD PTR _i$56897[ebp], 0
	jmp	SHORT $L56898
$L56899:
	mov	ecx, DWORD PTR _i$56897[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$56897[ebp], ecx
$L56898:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$56897[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $L56900
; Line 575
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$56897[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $L56901
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$56897[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$56897[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$56897[ebp]
	mov	DWORD PTR [eax+ecx*4], 0
$L56901:
; Line 576
	jmp	SHORT $L56899
$L56900:
; Line 578
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $L56902
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T57394[ebp], ecx
	mov	edx, DWORD PTR $T57394[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$L56902:
; Line 579
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $L56896
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T57396[ebp], eax
	mov	ecx, DWORD PTR $T57396[ebp]
	mov	DWORD PTR $T57395[ebp], ecx
	cmp	DWORD PTR $T57395[ebp], 0
	je	SHORT $L57397
	push	1
	mov	ecx, DWORD PTR $T57395[ebp]
	call	??_GCWaveFile@th08@@QAEPAXI@Z
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $L57398
$L57397:
	mov	DWORD PTR tv129[ebp], 0
$L57398:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$L56896:
; Line 580
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSound@th08@@UAE@XZ ENDP				; th08::CSound::~CSound
_TEXT	ENDS
PUBLIC	?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z ; th08::CSound::RestoreBuffer
PUBLIC	?Read@CWaveFile@th08@@QAEJPAEKPAK@Z		; th08::CWaveFile::Read
PUBLIC	?ResetFile@CWaveFile@th08@@QAEJ_N@Z		; th08::CWaveFile::ResetFile
; Function compile flags: /Odt
;	COMDAT ?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z
_TEXT	SEGMENT
_this$ = -24
_dwReadSoFar$56931 = -20
_pDSLockedBuffer$ = -16
_hr$ = -12
_dwWavDataRead$ = -8
_dwDSLockedBufferSize$ = -4
_pDSB$ = 8
_bRepeatWavIfBufferLarger$ = 12
?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z PROC NEAR ; th08::CSound::FillBufferWithSound, COMDAT
; _this$ = ecx
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 589
	mov	DWORD PTR _pDSLockedBuffer$[ebp], 0
; Line 590
	mov	DWORD PTR _dwDSLockedBufferSize$[ebp], 0
; Line 591
	mov	DWORD PTR _dwWavDataRead$[ebp], 0
; Line 593
	cmp	DWORD PTR _pDSB$[ebp], 0
	jne	SHORT $L56916
; Line 594
	mov	eax, -2147221008			; 800401f0H
	jmp	$L56911
$L56916:
; Line 598
	push	0
	mov	eax, DWORD PTR _pDSB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z ; th08::CSound::RestoreBuffer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56919
; Line 599
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L56911
$L56919:
; Line 602
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pDSLockedBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pDSB$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSB$[ebp]
	push	ecx
	call	DWORD PTR [eax+44]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56921
; Line 603
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L56911
$L56921:
; Line 606
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?ResetFile@CWaveFile@th08@@QAEJ_N@Z	; th08::CWaveFile::ResetFile
; Line 608
	lea	eax, DWORD PTR _dwWavDataRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSLockedBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?Read@CWaveFile@th08@@QAEJPAEKPAK@Z	; th08::CWaveFile::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56924
; Line 609
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L56911
$L56924:
; Line 611
	cmp	DWORD PTR _dwWavDataRead$[ebp], 0
	jne	SHORT $L56925
; Line 615
	mov	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+144]
	movzx	eax, WORD PTR [edx+46]
	xor	edx, edx
	cmp	eax, 8
	setne	dl
	dec	edx
	and	edx, 128				; 00000080H
	movzx	eax, dl
	mov	edi, DWORD PTR _pDSLockedBuffer$[ebp]
	mov	edx, ecx
	mov	bl, al
	mov	bh, bl
	mov	eax, ebx
	shl	eax, 16					; 00000010H
	mov	ax, bx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
; Line 617
	jmp	$L56928
$L56925:
	mov	eax, DWORD PTR _dwWavDataRead$[ebp]
	cmp	eax, DWORD PTR _dwDSLockedBufferSize$[ebp]
	jae	$L56928
; Line 621
	cmp	DWORD PTR _bRepeatWavIfBufferLarger$[ebp], 0
	je	SHORT $L56930
; Line 624
	mov	ecx, DWORD PTR _dwWavDataRead$[ebp]
	mov	DWORD PTR _dwReadSoFar$56931[ebp], ecx
$L56933:
; Line 625
	mov	edx, DWORD PTR _dwReadSoFar$56931[ebp]
	cmp	edx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	jae	SHORT $L56934
; Line 629
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?ResetFile@CWaveFile@th08@@QAEJ_N@Z	; th08::CWaveFile::ResetFile
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56936
; Line 630
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L56911
$L56936:
; Line 633
	lea	ecx, DWORD PTR _dwWavDataRead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	sub	edx, DWORD PTR _dwReadSoFar$56931[ebp]
	push	edx
	mov	eax, DWORD PTR _pDSLockedBuffer$[ebp]
	add	eax, DWORD PTR _dwReadSoFar$56931[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?Read@CWaveFile@th08@@QAEJPAEKPAK@Z	; th08::CWaveFile::Read
	mov	DWORD PTR _hr$[ebp], eax
; Line 634
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56939
; Line 635
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L56911
$L56939:
; Line 637
	mov	edx, DWORD PTR _dwReadSoFar$56931[ebp]
	add	edx, DWORD PTR _dwWavDataRead$[ebp]
	mov	DWORD PTR _dwReadSoFar$56931[ebp], edx
; Line 638
	jmp	SHORT $L56933
$L56934:
; Line 640
	jmp	SHORT $L56928
$L56930:
; Line 644
	mov	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	sub	ecx, DWORD PTR _dwWavDataRead$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [edx+144]
	movzx	edx, WORD PTR [eax+46]
	xor	eax, eax
	cmp	edx, 8
	setne	al
	dec	eax
	and	eax, 128				; 00000080H
	movzx	eax, al
	mov	edi, DWORD PTR _pDSLockedBuffer$[ebp]
	add	edi, DWORD PTR _dwWavDataRead$[ebp]
	mov	edx, ecx
	mov	bl, al
	mov	bh, bl
	mov	eax, ebx
	shl	eax, 16					; 00000010H
	mov	ax, bx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
$L56928:
; Line 649
	push	0
	push	0
	mov	eax, DWORD PTR _dwDSLockedBufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDSLockedBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSB$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSB$[ebp]
	push	ecx
	call	DWORD PTR [eax+76]
; Line 651
	xor	eax, eax
$L56911:
; Line 652
	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z ENDP ; th08::CSound::FillBufferWithSound
_TEXT	ENDS
EXTRN	__imp__Sleep@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z
_TEXT	SEGMENT
_this$ = -12
_hr$ = -8
_dwStatus$ = -4
_pDSB$ = 8
_pbWasRestored$ = 12
?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z PROC NEAR ; th08::CSound::RestoreBuffer, COMDAT
; _this$ = ecx
; Line 660
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 663
	cmp	DWORD PTR _pDSB$[ebp], 0
	jne	SHORT $L56950
; Line 664
	mov	eax, -2147221008			; 800401f0H
	jmp	$L56948
$L56950:
; Line 665
	cmp	DWORD PTR _pbWasRestored$[ebp], 0
	je	SHORT $L56952
; Line 666
	mov	eax, DWORD PTR _pbWasRestored$[ebp]
	mov	DWORD PTR [eax], 0
$L56952:
; Line 669
	lea	ecx, DWORD PTR _dwStatus$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSB$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDSB$[ebp]
	push	ecx
	call	DWORD PTR [eax+36]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L56955
; Line 670
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L56948
$L56955:
; Line 672
	mov	edx, DWORD PTR _dwStatus$[ebp]
	and	edx, 2
	test	edx, edx
	je	SHORT $L56956
$L56957:
; Line 680
	mov	eax, DWORD PTR _pDSB$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSB$[ebp]
	push	edx
	call	DWORD PTR [ecx+80]
	mov	DWORD PTR _hr$[ebp], eax
; Line 681
	cmp	DWORD PTR _hr$[ebp], -2005401450	; 88780096H
	jne	SHORT $L56958
; Line 682
	push	10					; 0000000aH
	call	DWORD PTR __imp__Sleep@4
$L56958:
; Line 683
	mov	eax, DWORD PTR _pDSB$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSB$[ebp]
	push	edx
	call	DWORD PTR [ecx+80]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $L56957
; Line 685
	cmp	DWORD PTR _pbWasRestored$[ebp], 0
	je	SHORT $L56965
; Line 686
	mov	eax, DWORD PTR _pbWasRestored$[ebp]
	mov	DWORD PTR [eax], 1
$L56965:
; Line 688
	xor	eax, eax
	jmp	SHORT $L56948
$L56956:
; Line 692
	mov	eax, 1
$L56948:
; Line 694
	mov	esp, ebp
	pop	ebp
	ret	8
?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z ENDP ; th08::CSound::RestoreBuffer
_TEXT	ENDS
PUBLIC	?GetFreeBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@XZ ; th08::CSound::GetFreeBuffer
EXTRN	_rand:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetFreeBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@XZ
_TEXT	SEGMENT
_this$ = -16
_dwStatus$56979 = -12
_i$56974 = -8
_bIsPlaying$ = -4
?GetFreeBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@XZ PROC NEAR ; th08::CSound::GetFreeBuffer, COMDAT
; _this$ = ecx
; Line 701
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 702
	mov	DWORD PTR _bIsPlaying$[ebp], 0
; Line 704
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L56973
; Line 705
	xor	eax, eax
	jmp	$L56971
$L56973:
; Line 707
	mov	DWORD PTR _i$56974[ebp], 0
	jmp	SHORT $L56975
$L56976:
	mov	ecx, DWORD PTR _i$56974[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$56974[ebp], ecx
$L56975:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$56974[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $L56977
; Line 709
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$56974[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $L56978
; Line 711
	mov	DWORD PTR _dwStatus$56979[ebp], 0
; Line 712
	lea	ecx, DWORD PTR _dwStatus$56979[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$56974[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$56974[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+36]
; Line 713
	mov	eax, DWORD PTR _dwStatus$56979[ebp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $L56978
; Line 714
	jmp	SHORT $L56977
$L56978:
; Line 716
	jmp	SHORT $L56976
$L56977:
; Line 718
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$56974[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $L56981
; Line 719
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$56974[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $L56971
$L56981:
; Line 721
	call	_rand
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+edx*4]
$L56971:
; Line 722
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFreeBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@XZ ENDP ; th08::CSound::GetFreeBuffer
_TEXT	ENDS
PUBLIC	?GetBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@K@Z ; th08::CSound::GetBuffer
; Function compile flags: /Odt
;	COMDAT ?GetBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@K@Z
_TEXT	SEGMENT
_this$ = -4
_dwIndex$ = 8
?GetBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@K@Z PROC NEAR ; th08::CSound::GetBuffer, COMDAT
; _this$ = ecx
; Line 729
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 730
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L56987
; Line 731
	xor	eax, eax
	jmp	SHORT $L56986
$L56987:
; Line 732
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $L56988
; Line 733
	xor	eax, eax
	jmp	SHORT $L56986
$L56988:
; Line 735
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dwIndex$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
$L56986:
; Line 736
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@K@Z ENDP ; th08::CSound::GetBuffer
_TEXT	ENDS
PUBLIC	?Play@CSound@th08@@QAEJKK@Z			; th08::CSound::Play
PUBLIC	?Reset@CSound@th08@@QAEJXZ			; th08::CSound::Reset
PUBLIC	?SetVolume@CSound@th08@@QAEJH@Z			; th08::CSound::SetVolume
; Function compile flags: /Odt
;	COMDAT ?Play@CSound@th08@@QAEJKK@Z
_TEXT	SEGMENT
_this$ = -16
_hr$ = -12
_bRestored$ = -8
_pDSB$ = -4
_dwPriority$ = 8
_dwFlags$ = 12
?Play@CSound@th08@@QAEJKK@Z PROC NEAR			; th08::CSound::Play, COMDAT
; _this$ = ecx
; Line 762
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 766
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L56996
; Line 767
	mov	eax, -2147221008			; 800401f0H
	jmp	$L56993
$L56996:
; Line 769
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFreeBuffer@CSound@th08@@QAEPAUIDirectSoundBuffer@@XZ ; th08::CSound::GetFreeBuffer
	mov	DWORD PTR _pDSB$[ebp], eax
; Line 771
	cmp	DWORD PTR _pDSB$[ebp], 0
	jne	SHORT $L56999
; Line 772
	mov	eax, -2147467259			; 80004005H
	jmp	$L56993
$L56999:
; Line 775
	lea	ecx, DWORD PTR _bRestored$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDSB$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z ; th08::CSound::RestoreBuffer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57002
; Line 776
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L56993
$L57002:
; Line 778
	cmp	DWORD PTR _bRestored$[ebp], 0
	je	SHORT $L57003
; Line 781
	push	0
	mov	eax, DWORD PTR _pDSB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z ; th08::CSound::FillBufferWithSound
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57005
; Line 782
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L56993
$L57005:
; Line 785
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CSound@th08@@QAEJXZ		; th08::CSound::Reset
$L57003:
; Line 788
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 789
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 790
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 791
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVolume@CSound@th08@@QAEJH@Z		; th08::CSound::SetVolume
; Line 792
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 1
; Line 793
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dwPriority$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 794
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwFlags$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 795
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 797
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwPriority$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pDSB$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSB$[ebp]
	push	edx
	call	DWORD PTR [ecx+48]
$L56993:
; Line 798
	mov	esp, ebp
	pop	ebp
	ret	8
?Play@CSound@th08@@QAEJKK@Z ENDP			; th08::CSound::Play
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@3f800000
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	?g_SoundPlayer@th08@@3VSoundPlayer@1@A:BYTE	; th08::g_SoundPlayer
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetVolume@CSound@th08@@QAEJH@Z
_TEXT	SEGMENT
tv136 = -12
_this$ = -8
_volumeF$ = -4
_iVolume$ = 8
?SetVolume@CSound@th08@@QAEJH@Z PROC NEAR		; th08::CSound::SetVolume, COMDAT
; _this$ = ecx
; Line 805
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 806
	fild	DWORD PTR ?g_SoundPlayer@th08@@3VSoundPlayer@1@A+21012
	fdiv	DWORD PTR __real@42c80000
	fstp	DWORD PTR _volumeF$[ebp]
; Line 808
	cmp	DWORD PTR ?g_SoundPlayer@th08@@3VSoundPlayer@1@A+21012, 0
	je	SHORT $L57011
; Line 810
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR _volumeF$[ebp]
	fst	DWORD PTR _volumeF$[ebp]
; Line 811
	fmul	DWORD PTR _volumeF$[ebp]
	fstp	DWORD PTR _volumeF$[ebp]
; Line 812
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR _volumeF$[ebp]
	fstp	DWORD PTR _volumeF$[ebp]
; Line 813
	mov	eax, DWORD PTR _iVolume$[ebp]
	add	eax, 5000				; 00001388H
	mov	DWORD PTR tv136[ebp], eax
	fild	DWORD PTR tv136[ebp]
	fmul	DWORD PTR _volumeF$[ebp]
	call	__ftol2
	sub	eax, 5000				; 00001388H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR [edx+60]
	jmp	SHORT $L57009
$L57011:
; Line 817
	push	-10000					; ffffd8f0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	push	eax
	call	DWORD PTR [ecx+60]
$L57009:
; Line 819
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVolume@CSound@th08@@QAEJH@Z ENDP			; th08::CSound::SetVolume
_TEXT	ENDS
PUBLIC	?Stop@CSound@th08@@QAEJXZ			; th08::CSound::Stop
; Function compile flags: /Odt
;	COMDAT ?Stop@CSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_i$57020 = -8
_hr$ = -4
?Stop@CSound@th08@@QAEJXZ PROC NEAR			; th08::CSound::Stop, COMDAT
; _this$ = ecx
; Line 826
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 827
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L57017
; Line 828
	mov	eax, -2147221008			; 800401f0H
	jmp	$L57016
$L57017:
; Line 830
	mov	DWORD PTR _hr$[ebp], 0
; Line 832
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 834
	mov	DWORD PTR _i$57020[ebp], 0
	jmp	SHORT $L57021
$L57022:
	mov	edx, DWORD PTR _i$57020[ebp]
	add	edx, 1
	mov	DWORD PTR _i$57020[ebp], edx
$L57021:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$57020[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $L57023
; Line 836
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$57020[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$57020[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _hr$[ebp]
	or	ecx, eax
	mov	DWORD PTR _hr$[ebp], ecx
; Line 837
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$57020[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$57020[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _hr$[ebp]
	or	ecx, eax
	mov	DWORD PTR _hr$[ebp], ecx
; Line 838
	jmp	SHORT $L57022
$L57023:
; Line 840
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 842
	mov	eax, DWORD PTR _hr$[ebp]
$L57016:
; Line 843
	mov	esp, ebp
	pop	ebp
	ret	0
?Stop@CSound@th08@@QAEJXZ ENDP				; th08::CSound::Stop
_TEXT	ENDS
PUBLIC	?Pause@CSound@th08@@QAEJXZ			; th08::CSound::Pause
; Function compile flags: /Odt
;	COMDAT ?Pause@CSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8
_hr$ = -4
?Pause@CSound@th08@@QAEJXZ PROC NEAR			; th08::CSound::Pause, COMDAT
; _this$ = ecx
; Line 850
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 851
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L57027
; Line 852
	mov	eax, -2147221008			; 800401f0H
	jmp	SHORT $L57026
$L57027:
; Line 854
	mov	DWORD PTR _hr$[ebp], 0
; Line 856
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 857
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _hr$[ebp]
	or	ecx, eax
	mov	DWORD PTR _hr$[ebp], ecx
; Line 859
	mov	eax, DWORD PTR _hr$[ebp]
$L57026:
; Line 860
	mov	esp, ebp
	pop	ebp
	ret	0
?Pause@CSound@th08@@QAEJXZ ENDP				; th08::CSound::Pause
_TEXT	ENDS
PUBLIC	?Unpause@CSound@th08@@QAEJXZ			; th08::CSound::Unpause
; Function compile flags: /Odt
;	COMDAT ?Unpause@CSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8
_pDSB$ = -4
?Unpause@CSound@th08@@QAEJXZ PROC NEAR			; th08::CSound::Unpause, COMDAT
; _this$ = ecx
; Line 867
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 868
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L57033
; Line 869
	mov	eax, -2147221008			; 800401f0H
	jmp	SHORT $L57032
$L57033:
; Line 871
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pDSB$[ebp], eax
; Line 873
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 1
; Line 875
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	push	0
	mov	eax, DWORD PTR _pDSB$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDSB$[ebp]
	push	edx
	call	DWORD PTR [ecx+48]
$L57032:
; Line 876
	mov	esp, ebp
	pop	ebp
	ret	0
?Unpause@CSound@th08@@QAEJXZ ENDP			; th08::CSound::Unpause
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Reset@CSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_i$57042 = -8
_hr$ = -4
?Reset@CSound@th08@@QAEJXZ PROC NEAR			; th08::CSound::Reset, COMDAT
; _this$ = ecx
; Line 883
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L57039
; Line 885
	mov	eax, -2147221008			; 800401f0H
	jmp	SHORT $L57038
$L57039:
; Line 887
	mov	DWORD PTR _hr$[ebp], 0
; Line 889
	mov	DWORD PTR _i$57042[ebp], 0
	jmp	SHORT $L57043
$L57044:
	mov	ecx, DWORD PTR _i$57042[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$57042[ebp], ecx
$L57043:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$57042[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $L57045
; Line 890
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$57042[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$57042[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _hr$[ebp]
	or	edx, eax
	mov	DWORD PTR _hr$[ebp], edx
	jmp	SHORT $L57044
$L57045:
; Line 892
	mov	eax, DWORD PTR _hr$[ebp]
$L57038:
; Line 893
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CSound@th08@@QAEJXZ ENDP				; th08::CSound::Reset
_TEXT	ENDS
PUBLIC	??_7CStreamingSound@th08@@6B@			; th08::CStreamingSound::`vftable'
PUBLIC	??_GCStreamingSound@th08@@UAEPAXI@Z		; th08::CStreamingSound::`scalar deleting destructor'
EXTRN	??_ECStreamingSound@th08@@UAEPAXI@Z:NEAR	; th08::CStreamingSound::`vector deleting destructor'
;	COMDAT ??_7CStreamingSound@th08@@6B@
CONST	SEGMENT
??_7CStreamingSound@th08@@6B@ DD FLAT:??_ECStreamingSound@th08@@UAEPAXI@Z ; th08::CStreamingSound::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z
_TEXT	SEGMENT
_this$ = -4
_pDSBuffer$ = 8
_dwDSBufferSize$ = 12
_pWaveFile$ = 16
_dwNotifySize$ = 20
??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z PROC NEAR ; th08::CStreamingSound::CStreamingSound, COMDAT
; _this$ = ecx
; Line 932
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pWaveFile$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _dwDSBufferSize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pDSBuffer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CSound@th08@@QAE@PAPAUIDirectSoundBuffer@@KKPAVCWaveFile@1@@Z ; th08::CSound::CSound
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CStreamingSound@th08@@6B@
; Line 933
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
; Line 934
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 935
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwNotifySize$[ebp]
	mov	DWORD PTR [eax+108], ecx
; Line 936
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0
; Line 937
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
; Line 938
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0CStreamingSound@th08@@QAE@PAUIDirectSoundBuffer@@KPAVCWaveFile@1@K@Z ENDP ; th08::CStreamingSound::CStreamingSound
_TEXT	ENDS
PUBLIC	??1CStreamingSound@th08@@UAE@XZ			; th08::CStreamingSound::~CStreamingSound
; Function compile flags: /Odt
;	COMDAT ??_GCStreamingSound@th08@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCStreamingSound@th08@@UAEPAXI@Z PROC NEAR		; th08::CStreamingSound::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStreamingSound@th08@@UAE@XZ		; th08::CStreamingSound::~CStreamingSound
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L57056
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L57056:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStreamingSound@th08@@UAEPAXI@Z ENDP		; th08::CStreamingSound::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CStreamingSound@th08@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CStreamingSound@th08@@UAE@XZ PROC NEAR		; th08::CStreamingSound::~CStreamingSound, COMDAT
; _this$ = ecx
; Line 945
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CStreamingSound@th08@@6B@
; Line 946
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSound@th08@@UAE@XZ			; th08::CSound::~CSound
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStreamingSound@th08@@UAE@XZ ENDP			; th08::CStreamingSound::~CStreamingSound
_TEXT	ENDS
PUBLIC	?UpdateFadeOut@CStreamingSound@th08@@QAEJXZ	; th08::CStreamingSound::UpdateFadeOut
; Function compile flags: /Odt
;	COMDAT ?UpdateFadeOut@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_hr$57067 = -8
_newVolume$57066 = -4
?UpdateFadeOut@CStreamingSound@th08@@QAEJXZ PROC NEAR	; th08::CStreamingSound::UpdateFadeOut, COMDAT
; _this$ = ecx
; Line 953
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 954
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 1
	jne	SHORT $L57063
; Line 956
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jg	SHORT $L57064
; Line 958
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 959
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	push	eax
	call	DWORD PTR [ecx+72]
; Line 960
	mov	eax, 1
	jmp	SHORT $L57062
$L57064:
; Line 963
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+24]
	sub	eax, 5000				; 00001388H
	mov	DWORD PTR _newVolume$57066[ebp], eax
; Line 964
	mov	edx, DWORD PTR _newVolume$57066[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVolume@CSound@th08@@QAEJH@Z		; th08::CSound::SetVolume
	mov	DWORD PTR _hr$57067[ebp], eax
$L57063:
; Line 967
	xor	eax, eax
$L57062:
; Line 968
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateFadeOut@CStreamingSound@th08@@QAEJXZ ENDP	; th08::CStreamingSound::UpdateFadeOut
_TEXT	ENDS
PUBLIC	?UpdateFadeIn@CStreamingSound@th08@@QAEJXZ	; th08::CStreamingSound::UpdateFadeIn
; Function compile flags: /Odt
;	COMDAT ?UpdateFadeIn@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_hr$57076 = -8
_newVolume$57075 = -4
?UpdateFadeIn@CStreamingSound@th08@@QAEJXZ PROC NEAR	; th08::CStreamingSound::UpdateFadeIn, COMDAT
; _this$ = ecx
; Line 975
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 976
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 2
	jne	SHORT $L57072
; Line 978
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jg	SHORT $L57073
; Line 980
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 981
	mov	eax, 1
	jmp	SHORT $L57071
$L57073:
; Line 984
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	imul	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+24]
	xor	edx, edx
	sub	edx, eax
	mov	DWORD PTR _newVolume$57075[ebp], edx
; Line 985
	mov	eax, DWORD PTR _newVolume$57075[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVolume@CSound@th08@@QAEJH@Z		; th08::CSound::SetVolume
	mov	DWORD PTR _hr$57076[ebp], eax
$L57072:
; Line 988
	xor	eax, eax
$L57071:
; Line 989
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateFadeIn@CStreamingSound@th08@@QAEJXZ ENDP		; th08::CStreamingSound::UpdateFadeIn
_TEXT	ENDS
PUBLIC	?UpdateShortFadeIn@CStreamingSound@th08@@QAEJXZ	; th08::CStreamingSound::UpdateShortFadeIn
; Function compile flags: /Odt
;	COMDAT ?UpdateShortFadeIn@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_hr$57085 = -8
_newVolume$57084 = -4
?UpdateShortFadeIn@CStreamingSound@th08@@QAEJXZ PROC NEAR ; th08::CStreamingSound::UpdateShortFadeIn, COMDAT
; _this$ = ecx
; Line 996
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 997
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 3
	jne	SHORT $L57081
; Line 999
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jg	SHORT $L57082
; Line 1001
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 1002
	mov	eax, 1
	jmp	SHORT $L57080
$L57082:
; Line 1005
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+24]
	xor	edx, edx
	sub	edx, eax
	mov	DWORD PTR _newVolume$57084[ebp], edx
; Line 1006
	mov	eax, DWORD PTR _newVolume$57084[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVolume@CSound@th08@@QAEJH@Z		; th08::CSound::SetVolume
	mov	DWORD PTR _hr$57085[ebp], eax
$L57081:
; Line 1009
	xor	eax, eax
$L57080:
; Line 1010
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateShortFadeIn@CStreamingSound@th08@@QAEJXZ ENDP	; th08::CStreamingSound::UpdateShortFadeIn
_TEXT	ENDS
PUBLIC	?UpdateShortFadeOut@CStreamingSound@th08@@QAEJXZ ; th08::CStreamingSound::UpdateShortFadeOut
; Function compile flags: /Odt
;	COMDAT ?UpdateShortFadeOut@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_hr$57094 = -8
_newVolume$57093 = -4
?UpdateShortFadeOut@CStreamingSound@th08@@QAEJXZ PROC NEAR ; th08::CStreamingSound::UpdateShortFadeOut, COMDAT
; _this$ = ecx
; Line 1017
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1018
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 4
	jne	SHORT $L57090
; Line 1020
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jg	SHORT $L57091
; Line 1022
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 1023
	mov	eax, 1
	jmp	SHORT $L57089
$L57091:
; Line 1026
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+24]
	sub	eax, 1000				; 000003e8H
	mov	DWORD PTR _newVolume$57093[ebp], eax
; Line 1027
	mov	edx, DWORD PTR _newVolume$57093[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVolume@CSound@th08@@QAEJH@Z		; th08::CSound::SetVolume
	mov	DWORD PTR _hr$57094[ebp], eax
$L57090:
; Line 1030
	xor	eax, eax
$L57089:
; Line 1031
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateShortFadeOut@CStreamingSound@th08@@QAEJXZ ENDP	; th08::CStreamingSound::UpdateShortFadeOut
_TEXT	ENDS
PUBLIC	?HandleWaveStreamNotification@CStreamingSound@th08@@QAEJH@Z ; th08::CStreamingSound::HandleWaveStreamNotification
PUBLIC	?GetSize@CWaveFile@th08@@QAEKXZ			; th08::CWaveFile::GetSize
; Function compile flags: /Odt
;	COMDAT ?HandleWaveStreamNotification@CStreamingSound@th08@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -52
_dwReadSoFar$57143 = -48
_local_30$ = -44
_dwCurrentPlayPos$ = -40
_dwDSLockedBufferSize$ = -36
_hr$ = -32
_dwPlayDelta$ = -28
_bRestored$ = -24
_pDSLockedBuffer2$ = -20
_local_14$ = -16
_dwBytesWrittenToBuffer$ = -12
_pDSLockedBuffer$ = -8
_dwDSLockedBufferSize2$ = -4
_bLoopedPlay$ = 8
?HandleWaveStreamNotification@CStreamingSound@th08@@QAEJH@Z PROC NEAR ; th08::CStreamingSound::HandleWaveStreamNotification, COMDAT
; _this$ = ecx
; Line 1041
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1053
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $L57111
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $L57110
$L57111:
; Line 1054
	mov	eax, -2147221008			; 800401f0H
	jmp	$L57099
$L57110:
; Line 1056
	lea	edx, DWORD PTR _local_30$[ebp]
	push	edx
	lea	eax, DWORD PTR _local_14$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR [edx+16]
; Line 1059
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _local_30$[ebp]
	sub	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], ecx
	jb	SHORT $L57115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	cmp	ecx, DWORD PTR _local_30$[ebp]
	jb	SHORT $L57114
$L57115:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _local_30$[ebp]
	sub	eax, DWORD PTR [edx+108]
	test	eax, eax
	jae	SHORT $L57113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], eax
	jb	SHORT $L57113
$L57114:
; Line 1061
	push	OFFSET FLAT:$SG57116
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1062
	mov	eax, -2147221008			; 800401f0H
	jmp	$L57099
$L57113:
; Line 1067
	lea	edx, DWORD PTR _bRestored$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z ; th08::CSound::RestoreBuffer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57119
; Line 1069
	push	OFFSET FLAT:$SG57120
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1070
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57119:
; Line 1073
	cmp	DWORD PTR _bRestored$[ebp], 0
	je	SHORT $L57121
; Line 1076
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z ; th08::CSound::FillBufferWithSound
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57123
; Line 1078
	push	OFFSET FLAT:$SG57124
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1079
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57123:
; Line 1081
	xor	eax, eax
	jmp	$L57099
$L57121:
; Line 1085
	mov	DWORD PTR _pDSLockedBuffer$[ebp], 0
; Line 1086
	mov	DWORD PTR _pDSLockedBuffer2$[ebp], 0
; Line 1088
	push	0
	lea	eax, DWORD PTR _dwDSLockedBufferSize2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pDSLockedBuffer2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	push	edx
	lea	eax, DWORD PTR _pDSLockedBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+44]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57127
; Line 1090
	push	OFFSET FLAT:$SG57128
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1091
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57127:
; Line 1096
	cmp	DWORD PTR _pDSLockedBuffer2$[ebp], 0
	je	SHORT $L57129
; Line 1097
	mov	eax, -2147418113			; 8000ffffH
	jmp	$L57099
$L57129:
; Line 1099
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	jne	SHORT $L57131
; Line 1102
	lea	edx, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwDSLockedBufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDSLockedBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?Read@CWaveFile@th08@@QAEJPAEKPAK@Z	; th08::CWaveFile::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57134
; Line 1104
	push	OFFSET FLAT:$SG57135
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1105
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57134:
; Line 1108
	jmp	SHORT $L57136
$L57131:
; Line 1112
	mov	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [edx+144]
	movzx	edx, WORD PTR [eax+46]
	xor	eax, eax
	cmp	edx, 8
	setne	al
	dec	eax
	and	eax, 128				; 00000080H
	movzx	eax, al
	mov	edi, DWORD PTR _pDSLockedBuffer$[ebp]
	mov	edx, ecx
	mov	bl, al
	mov	bh, bl
	mov	eax, ebx
	shl	eax, 16					; 00000010H
	mov	ax, bx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
; Line 1113
	mov	eax, DWORD PTR _dwDSLockedBufferSize$[ebp]
	mov	DWORD PTR _dwBytesWrittenToBuffer$[ebp], eax
$L57136:
; Line 1118
	mov	ecx, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	cmp	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	jae	$L57138
; Line 1120
	cmp	DWORD PTR _bLoopedPlay$[ebp], 0
	jne	SHORT $L57139
; Line 1124
	mov	ecx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	sub	ecx, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+144]
	movzx	eax, WORD PTR [edx+46]
	xor	edx, edx
	cmp	eax, 8
	setne	dl
	dec	edx
	and	edx, 128				; 00000080H
	movzx	eax, dl
	mov	edi, DWORD PTR _pDSLockedBuffer$[ebp]
	add	edi, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	mov	edx, ecx
	mov	bl, al
	mov	bh, bl
	mov	eax, ebx
	shl	eax, 16					; 00000010H
	mov	ax, bx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
; Line 1127
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 1
; Line 1129
	jmp	SHORT $L57138
$L57139:
; Line 1132
	mov	ecx, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	mov	DWORD PTR _dwReadSoFar$57143[ebp], ecx
$L57145:
; Line 1133
	mov	edx, DWORD PTR _dwReadSoFar$57143[ebp]
	cmp	edx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	jae	SHORT $L57138
; Line 1136
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?ResetFile@CWaveFile@th08@@QAEJ_N@Z	; th08::CWaveFile::ResetFile
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57148
; Line 1138
	push	OFFSET FLAT:$SG57149
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1139
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57148:
; Line 1143
	lea	ecx, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	sub	edx, DWORD PTR _dwReadSoFar$57143[ebp]
	push	edx
	mov	eax, DWORD PTR _pDSLockedBuffer$[ebp]
	add	eax, DWORD PTR _dwReadSoFar$57143[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?Read@CWaveFile@th08@@QAEJPAEKPAK@Z	; th08::CWaveFile::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57152
; Line 1145
	push	OFFSET FLAT:$SG57153
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1146
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57152:
; Line 1149
	mov	edx, DWORD PTR _dwReadSoFar$57143[ebp]
	add	edx, DWORD PTR _dwBytesWrittenToBuffer$[ebp]
	mov	DWORD PTR _dwReadSoFar$57143[ebp], edx
; Line 1150
	jmp	SHORT $L57145
$L57138:
; Line 1155
	push	0
	push	0
	mov	eax, DWORD PTR _dwDSLockedBufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDSLockedBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+76]
; Line 1161
	push	0
	lea	ecx, DWORD PTR _dwCurrentPlayPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+16]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57155
; Line 1163
	push	OFFSET FLAT:$SG57156
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 4
; Line 1164
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$L57099
$L57155:
; Line 1168
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwCurrentPlayPos$[ebp]
	cmp	edx, DWORD PTR [ecx+92]
	jae	SHORT $L57157
; Line 1169
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+92]
	add	edx, DWORD PTR _dwCurrentPlayPos$[ebp]
	mov	DWORD PTR _dwPlayDelta$[ebp], edx
; Line 1170
	jmp	SHORT $L57158
$L57157:
; Line 1171
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwCurrentPlayPos$[ebp]
	sub	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _dwPlayDelta$[ebp], ecx
$L57158:
; Line 1173
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	add	eax, DWORD PTR _dwPlayDelta$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 1174
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dwCurrentPlayPos$[ebp]
	mov	DWORD PTR [edx+92], eax
; Line 1178
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $L57159
; Line 1181
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?GetSize@CWaveFile@th08@@QAEKXZ		; th08::CWaveFile::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+96], eax
	jb	SHORT $L57159
; Line 1183
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+72]
$L57159:
; Line 1188
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, DWORD PTR _dwDSLockedBufferSize$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 1189
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	xor	edx, edx
	div	DWORD PTR [esi+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 1191
	xor	eax, eax
$L57099:
; Line 1192
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?HandleWaveStreamNotification@CStreamingSound@th08@@QAEJH@Z ENDP ; th08::CStreamingSound::HandleWaveStreamNotification
_TEXT	ENDS
PUBLIC	?Reset@CStreamingSound@th08@@QAEJXZ		; th08::CStreamingSound::Reset
; Function compile flags: /Odt
;	COMDAT ?Reset@CStreamingSound@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -12
_hr$ = -8
_bRestored$ = -4
?Reset@CStreamingSound@th08@@QAEJXZ PROC NEAR		; th08::CStreamingSound::Reset, COMDAT
; _this$ = ecx
; Line 1199
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1202
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $L57167
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $L57166
$L57167:
; Line 1203
	mov	eax, -2147221008			; 800401f0H
	jmp	$L57164
$L57166:
; Line 1205
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 1206
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 1207
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0
; Line 1208
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
; Line 1212
	lea	ecx, DWORD PTR _bRestored$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreBuffer@CSound@th08@@IAEJPAUIDirectSoundBuffer@@PAH@Z ; th08::CSound::RestoreBuffer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57171
; Line 1213
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L57164
$L57171:
; Line 1215
	cmp	DWORD PTR _bRestored$[ebp], 0
	je	SHORT $L57172
; Line 1218
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillBufferWithSound@CSound@th08@@QAEJPAUIDirectSoundBuffer@@H@Z ; th08::CSound::FillBufferWithSound
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L57172
; Line 1219
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $L57164
$L57172:
; Line 1222
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?ResetFile@CWaveFile@th08@@QAEJ_N@Z	; th08::CWaveFile::ResetFile
; Line 1224
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	push	eax
	call	DWORD PTR [ecx+52]
$L57164:
; Line 1225
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CStreamingSound@th08@@QAEJXZ ENDP		; th08::CStreamingSound::Reset
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CWaveFile@th08@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWaveFile@th08@@QAE@XZ PROC NEAR			; th08::CWaveFile::CWaveFile, COMDAT
; _this$ = ecx
; Line 1234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1235
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0
; Line 1236
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1237
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
; Line 1238
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 0
; Line 1239
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CWaveFile@th08@@QAE@XZ ENDP				; th08::CWaveFile::CWaveFile
_TEXT	ENDS
PUBLIC	?Close@CWaveFile@th08@@QAEJXZ			; th08::CWaveFile::Close
; Function compile flags: /Odt
;	COMDAT ??1CWaveFile@th08@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CWaveFile@th08@@QAE@XZ PROC NEAR			; th08::CWaveFile::~CWaveFile, COMDAT
; _this$ = ecx
; Line 1246
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1247
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CWaveFile@th08@@QAEJXZ		; th08::CWaveFile::Close
; Line 1248
	mov	esp, ebp
	pop	ebp
	ret	0
??1CWaveFile@th08@@QAE@XZ ENDP				; th08::CWaveFile::~CWaveFile
_TEXT	ENDS
EXTRN	__imp__CreateFileA@28:NEAR
; Function compile flags: /Odt
;	COMDAT ?Open@CWaveFile@th08@@QAEJPADPAUThBgmFormat@2@K@Z
_TEXT	SEGMENT
_this$ = -4
_strFileName$ = 8
_pzwf$ = 12
_dwFlags$ = 16
?Open@CWaveFile@th08@@QAEJPADPAUThBgmFormat@2@K@Z PROC NEAR ; th08::CWaveFile::Open, COMDAT
; _this$ = ecx
; Line 1255
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 1257
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], 0
; Line 1259
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+120], 1
	jne	SHORT $L57187
; Line 1261
	cmp	DWORD PTR _strFileName$[ebp], 0
	jne	SHORT $L57188
; Line 1262
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $L57186
$L57188:
; Line 1264
	mov	ecx, DWORD PTR _strFileName$[ebp]
	push	ecx
	push	OFFSET FLAT:$SG57190
	call	?DebugPrint@utils@th08@@YAXPADZZ	; th08::utils::DebugPrint
	add	esp, 8
; Line 1266
	push	0
	push	134217856				; 08000080H
	push	3
	push	0
	push	1
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _strFileName$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], eax
; Line 1268
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], -1
	jne	SHORT $L57193
; Line 1269
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $L57186
$L57193:
; Line 1271
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pzwf$[ebp]
	mov	DWORD PTR [eax+144], ecx
; Line 1272
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetFile@CWaveFile@th08@@QAEJ_N@Z	; th08::CWaveFile::ResetFile
; Line 1273
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+44], ecx
$L57187:
; Line 1276
	xor	eax, eax
$L57186:
; Line 1277
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Open@CWaveFile@th08@@QAEJPADPAUThBgmFormat@2@K@Z ENDP	; th08::CWaveFile::Open
_TEXT	ENDS
PUBLIC	?Reopen@CWaveFile@th08@@QAEJPAUThBgmFormat@2@@Z	; th08::CWaveFile::Reopen
; Function compile flags: /Odt
;	COMDAT ?Reopen@CWaveFile@th08@@QAEJPAUThBgmFormat@2@@Z
_TEXT	SEGMENT
_this$ = -4
_pzwf$ = 8
?Reopen@CWaveFile@th08@@QAEJPAUThBgmFormat@2@@Z PROC NEAR ; th08::CWaveFile::Reopen, COMDAT
; _this$ = ecx
; Line 1284
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1285
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $L57200
; Line 1286
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $L57199
$L57200:
; Line 1288
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], -1
	jne	SHORT $L57204
; Line 1289
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $L57199
$L57204:
; Line 1291
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pzwf$[ebp]
	mov	DWORD PTR [edx+144], eax
; Line 1292
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetFile@CWaveFile@th08@@QAEJ_N@Z	; th08::CWaveFile::ResetFile
; Line 1293
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+44], eax
; Line 1294
	xor	eax, eax
$L57199:
; Line 1295
	mov	esp, ebp
	pop	ebp
	ret	4
?Reopen@CWaveFile@th08@@QAEJPAUThBgmFormat@2@@Z ENDP	; th08::CWaveFile::Reopen
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OpenFromMemory@CWaveFile@th08@@QAEJPAEKPAUThBgmFormat@2@K@Z
_TEXT	SEGMENT
_this$ = -4
_pbData$ = 8
_ulDataSize$ = 12
_pzwf$ = 16
_dwFlags$ = 20
?OpenFromMemory@CWaveFile@th08@@QAEJPAEKPAUThBgmFormat@2@K@Z PROC NEAR ; th08::CWaveFile::OpenFromMemory, COMDAT
; _this$ = ecx
; Line 1302
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1303
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pzwf$[ebp]
	mov	DWORD PTR [eax+144], ecx
; Line 1304
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ulDataSize$[ebp]
	mov	DWORD PTR [edx+136], eax
; Line 1305
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pbData$[ebp]
	mov	DWORD PTR [ecx+128], edx
; Line 1306
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+132], edx
; Line 1307
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 1
; Line 1309
	cmp	DWORD PTR _dwFlags$[ebp], 1
	je	SHORT $L57214
; Line 1310
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $L57213
$L57214:
; Line 1312
	xor	eax, eax
$L57213:
; Line 1313
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?OpenFromMemory@CWaveFile@th08@@QAEJPAEKPAUThBgmFormat@2@K@Z ENDP ; th08::CWaveFile::OpenFromMemory
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@CWaveFile@th08@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetSize@CWaveFile@th08@@QAEKXZ PROC NEAR		; th08::CWaveFile::GetSize, COMDAT
; _this$ = ecx
; Line 1320
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1321
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
; Line 1322
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CWaveFile@th08@@QAEKXZ ENDP			; th08::CWaveFile::GetSize
_TEXT	ENDS
EXTRN	__imp__SetFilePointer@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?ResetFile@CWaveFile@th08@@QAEJ_N@Z
_TEXT	SEGMENT
_this$ = -8
_unk$ = -4
_bLoop$ = 8
?ResetFile@CWaveFile@th08@@QAEJ_N@Z PROC NEAR		; th08::CWaveFile::ResetFile, COMDAT
; _this$ = ecx
; Line 1330
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1333
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $L57225
; Line 1335
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR [ecx+132], eax
; Line 1337
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	cmp	DWORD PTR [edx+28], 0
	jle	SHORT $L57226
; Line 1339
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+136], eax
$L57226:
; Line 1342
	movzx	ecx, BYTE PTR _bLoop$[ebp]
	test	ecx, ecx
	je	SHORT $L57227
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $L57227
; Line 1344
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	add	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], ecx
$L57227:
; Line 1347
	jmp	$L57228
$L57225:
; Line 1349
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	jne	SHORT $L57229
; Line 1351
	mov	eax, -2147221008			; 800401f0H
	jmp	$L57223
$L57229:
; Line 1354
	movzx	ecx, BYTE PTR _bLoop$[ebp]
	test	ecx, ecx
	je	SHORT $L57231
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $L57231
; Line 1358
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR ?g_SoundPlayer@th08@@3VSoundPlayer@1@A+21008
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	add	eax, DWORD PTR [edx+16]
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	DWORD PTR __imp__SetFilePointer@16
	mov	DWORD PTR _unk$[ebp], eax
; Line 1359
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR [eax+28]
	sub	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1361
	jmp	SHORT $L57228
$L57231:
; Line 1363
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	ecx, DWORD PTR ?g_SoundPlayer@th08@@3VSoundPlayer@1@A+21008
	add	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	call	DWORD PTR __imp__SetFilePointer@16
	mov	DWORD PTR _unk$[ebp], eax
; Line 1364
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+8], ecx
$L57228:
; Line 1368
	xor	eax, eax
$L57223:
; Line 1369
	mov	esp, ebp
	pop	ebp
	ret	4
?ResetFile@CWaveFile@th08@@QAEJ_N@Z ENDP		; th08::CWaveFile::ResetFile
_TEXT	ENDS
EXTRN	__imp__ReadFile@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Read@CWaveFile@th08@@QAEJPAEKPAK@Z
_TEXT	SEGMENT
_this$ = -12
_cbDataIn$57256 = -8
_dwSize$57258 = -4
_pBuffer$ = 8
_dwSizeToRead$ = 12
_pdwSizeRead$ = 16
?Read@CWaveFile@th08@@QAEJPAEKPAK@Z PROC NEAR		; th08::CWaveFile::Read, COMDAT
; _this$ = ecx
; Line 1380
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
; Line 1381
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	$L57240
; Line 1383
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jne	SHORT $L57241
; Line 1384
	mov	eax, -2147221008			; 800401f0H
	jmp	$L57239
$L57241:
; Line 1385
	cmp	DWORD PTR _pdwSizeRead$[ebp], 0
	je	SHORT $L57243
; Line 1386
	mov	edx, DWORD PTR _pdwSizeRead$[ebp]
	mov	DWORD PTR [edx], 0
$L57243:
; Line 1388
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	add	ecx, DWORD PTR _dwSizeToRead$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+136]
	cmp	ecx, eax
	jbe	SHORT $L57246
; Line 1390
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+132]
	sub	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	sub	ecx, edx
	mov	DWORD PTR _dwSizeToRead$[ebp], ecx
$L57246:
; Line 1393
	mov	ecx, DWORD PTR _dwSizeToRead$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+132]
	mov	edi, DWORD PTR _pBuffer$[ebp]
	mov	eax, ecx
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb
; Line 1394
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	add	edx, DWORD PTR _dwSizeToRead$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], edx
; Line 1396
	cmp	DWORD PTR _pdwSizeRead$[ebp], 0
	je	SHORT $L57248
; Line 1397
	mov	ecx, DWORD PTR _pdwSizeRead$[ebp]
	mov	edx, DWORD PTR _dwSizeToRead$[ebp]
	mov	DWORD PTR [ecx], edx
$L57248:
; Line 1399
	xor	eax, eax
	jmp	SHORT $L57239
$L57240:
; Line 1403
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	jne	SHORT $L57251
; Line 1404
	mov	eax, -2147221008			; 800401f0H
	jmp	SHORT $L57239
$L57251:
; Line 1405
	cmp	DWORD PTR _pBuffer$[ebp], 0
	je	SHORT $L57254
	cmp	DWORD PTR _pdwSizeRead$[ebp], 0
	jne	SHORT $L57253
$L57254:
; Line 1406
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $L57239
$L57253:
; Line 1408
	mov	ecx, DWORD PTR _dwSizeToRead$[ebp]
	mov	DWORD PTR _cbDataIn$57256[ebp], ecx
; Line 1409
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cbDataIn$57256[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jbe	SHORT $L57257
; Line 1410
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _cbDataIn$57256[ebp], edx
$L57257:
; Line 1412
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _cbDataIn$57256[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1415
	push	0
	lea	eax, DWORD PTR _dwSize$57258[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbDataIn$57256[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
; Line 1417
	cmp	DWORD PTR _pdwSizeRead$[ebp], 0
	je	SHORT $L57259
; Line 1418
	mov	edx, DWORD PTR _pdwSizeRead$[ebp]
	mov	eax, DWORD PTR _dwSize$57258[ebp]
	mov	DWORD PTR [edx], eax
$L57259:
; Line 1420
	xor	eax, eax
$L57239:
; Line 1422
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Read@CWaveFile@th08@@QAEJPAEKPAK@Z ENDP		; th08::CWaveFile::Read
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Close@CWaveFile@th08@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4
?Close@CWaveFile@th08@@QAEJXZ PROC NEAR			; th08::CWaveFile::Close, COMDAT
; _this$ = ecx
; Line 1429
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1430
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+120], 1
	jne	SHORT $L57264
; Line 1432
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
; Line 1433
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], -1
$L57264:
; Line 1436
	xor	eax, eax
; Line 1437
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CWaveFile@th08@@QAEJXZ ENDP			; th08::CWaveFile::Close
_TEXT	ENDS
END
